{"version":3,"sources":["util/jwt.tsx","context/UserContext.tsx","components/Masthead/Masthead.tsx","components/Button/Button.tsx","pages/LandingPage/LandingPage.tsx","context/PostsContext.tsx","components/PostPreview/PostPreview.tsx","pages/PostIndexPage/PostIndexPage.tsx","components/ByLine/ByLine.tsx","components/Post/Post.tsx","util/params.tsx","components/UserForm/UserForm.tsx","components/CreatePostForm/CreatePostForm.tsx","pages/CreatePostPage/CreatePostPage.tsx","components/ProtectedRoute/ProtectedRoute.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getJWT","window","localStorage","getItem","UserContext","React","createContext","currentUser","undefined","loggedIn","setCurrentUser","setLoggedIn","Masthead","useContext","className","to","userName","permissions","Button","children","buttonType","type","LandingPage","props","PostsContext","posts","getPosts","PostPreview","post","id","author","title","subtitle","updatedAt","Date","toDateString","readTime","src","imageUrl","alt","PostIndexPage","useEffect","map","ByLine","Post","useState","body","setPost","postId","path","split","getPostIdFromPath","useLocation","pathname","a","Axios","get","process","requestedPost","data","getPost","ReactHtmlParser","UserForm","formText","buttonText","submitUrl","setUserName","password","setPassword","history","useHistory","onSubmit","e","preventDefault","user","console","log","token","accessToken","setItem","push","message","htmlFor","onChange","target","value","createKebabId","arr","words","forEach","word","i","toLowerCase","length","join","CreatePostForm","EditorState","createEmpty","editorState","setEditorState","setTitle","setSubtitle","setImageUrl","convertRawToHTML","raw","convertToRaw","getCurrentContent","draftToHtml","submit","wordCount","htmlWordCount","headers","Authorization","onEditorStateChange","CreatePostPage","ProtectedRoute","accessible","redirect","App","setPosts","jwt","useCallback","allposts","validateUser","validUser","userValidation","basename","Provider","exact","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.128c0c4f.chunk.js","sourcesContent":["export const setJWT = (token) => {\n  window.localStorage.setItem(\"MEDIAN_JWT\", token);\n};\n\nexport const getJWT = () => {\n  return window.localStorage.getItem(\"MEDIAN_JWT\");\n};\n","import React from \"react\";\n\ninterface UserContext {\n  currentUser?: any;\n  setCurrentUser?: any;\n  setLoggedIn?: any;\n  loggedIn?: any;\n}\n\nexport const UserContext = React.createContext<UserContext>({\n  currentUser: undefined,\n  loggedIn: undefined,\n  setCurrentUser: () => {},\n  setLoggedIn: () => {},\n});\n","import { ByLine } from \"components/ByLine/ByLine\";\nimport React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { UserContext } from \"../../context/UserContext\";\nimport \"./Masthead.scss\";\n\ninterface Props {}\n\nexport const Masthead: React.FC<Props> = () => {\n  const { currentUser } = useContext(UserContext);\n  return (\n    <div className=\"masthead\">\n      <Link to=\"/posts\" className=\"masthead__title\">\n        Median\n      </Link>\n      <div className=\"masthead__login\">\n        {!currentUser && (\n          <Link to=\"/signup\" className=\"button\">\n            Sign Up\n          </Link>\n        )}\n        {!currentUser && (\n          <Link to=\"/login\" className=\"button\">\n            Log In\n          </Link>\n        )}\n        {currentUser && `Welcome, ${currentUser.userName}`}\n        {currentUser && currentUser.permissions === \"admin\" && (\n          <Link to=\"/posts/create\" className=\"masthead__link\">\n            Create Post\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./Button.scss\";\n\ninterface Props {\n  buttonType: string;\n  type?: any;\n  action?: () => {};\n}\n\nexport const Button: React.FC<Props> = ({ children, buttonType, type }) => {\n  return (\n    <button type={type} className={\"button button__\" + buttonType}>\n      {children}\n    </button>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"../../components/Button/Button\";\nimport \"./LandingPage.scss\";\n\ninterface Props {}\n\nexport const LandingPage: React.FC<Props> = (props) => {\n  return (\n    <div className=\"landing-page\">\n      <div className=\"landing-page__content\">\n        <div className=\"header\">Dive deeper on topics that matter to Ian.</div>\n        <div className=\"sub-header\">\n          <u>Med</u>ia related to <u>Ian</u>... <u>Median</u>.\n        </div>\n        <Link to=\"/posts\">\n          <Button buttonType=\"transparent\">Get Started</Button>\n        </Link>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const PostsContext = React.createContext({\n  posts: [],\n  getPosts: () => {},\n});\n","import React from \"react\";\nimport { Post } from \"../../types/Post\";\nimport { Link } from \"react-router-dom\";\nimport \"./PostPreview.scss\";\n\ninterface Props {\n  post: Post;\n}\n\nexport const PostPreview: React.FC<Props> = ({ post }) => {\n  return (\n    <Link to={`/posts/${post.id}`} className=\"post-preview\">\n      <div>\n        <div className=\"post-preview__author\">\n          <span className=\"placeholder post-preview__placeholder\">ID</span>\n          {post.author}\n        </div>\n        <h1>{post.title}</h1>\n        <h3>{post.subtitle}</h3>\n        <div className=\"post-preview__meta-data\">\n          {post.updatedAt ? (\n            <span>{new Date(post.updatedAt).toDateString()}</span>\n          ) : null}\n          <span className=\"post-preview__separator\">•</span>\n          {post.readTime ? <span>{post.readTime}m</span> : null}\n        </div>\n      </div>\n      <img src={post.imageUrl} alt=\"\" />\n    </Link>\n  );\n};\n","import React, { useContext, useEffect } from \"react\";\nimport { PostsContext } from \"../../context/PostsContext\";\nimport { PostPreview } from \"../../components/PostPreview/PostPreview\";\nimport \"./PostIndexPage.scss\";\n\nexport const PostIndexPage = () => {\n  const { posts, getPosts } = useContext(PostsContext);\n\n  useEffect(() => {\n    getPosts();\n  }, [getPosts]);\n\n  return (\n    <div className=\"post-index-page\">\n      {posts.map((post) => {\n        return <PostPreview post={post} />;\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Post } from \"types/Post\";\nimport \"./ByLine.scss\";\n\ninterface Props {\n  post: Post;\n}\n\nexport const ByLine: React.FC<Props> = ({ post }) => {\n  const { updatedAt, readTime, author } = post;\n  return (\n    <div className=\"by-line\">\n      <span className=\"by-line__placeholder\">ID</span>\n      <div className=\"by-line__data\">\n        <div>{author}</div>\n        <div className=\"by-line__data-secondline\">\n          <div>{new Date(updatedAt).toDateString()}</div>\n          <span className=\"by-line__separator\">•</span>\n          <div>{readTime} min</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Post as PostType } from \"../../types/Post\";\nimport { ByLine } from \"../ByLine/ByLine\";\n\nimport { getPostIdFromPath } from \"../../util/params\";\n\nimport { useLocation } from \"react-router-dom\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport Axios from \"axios\";\nimport \"./Post.scss\";\n\ninterface Props {}\n\nexport const Post: React.FC<Props> = () => {\n  const [post, setPost] = useState({\n    title: \"\",\n    subtitle: \"\",\n    author: \"\",\n    imageUrl: \"\",\n    body: \"\",\n  });\n  const path = useLocation().pathname;\n  const postId = getPostIdFromPath(path);\n\n  useEffect(() => {\n    const getPost = async () => {\n      const requestedPost = await Axios.get(\n        `${process.env.REACT_APP_API_URL}/posts/${postId}`\n      );\n      setPost(requestedPost.data[0]);\n    };\n    getPost();\n  }, [postId, setPost]);\n\n  return (\n    <div className=\"post\">\n      <h1>{post.title}</h1>\n      <h3 className=\"\">{post.subtitle}</h3>\n      {post.author && <ByLine post={post as PostType} />}\n      <img src={post.imageUrl} alt=\"\" />\n      <div>{ReactHtmlParser(post.body)}</div>\n    </div>\n  );\n};\n","export const getPostIdFromPath = (path: string): string => {\n  const pathArray = path.split(\"/\");\n  return pathArray[2];\n};\n","import React, { useState, useContext } from \"react\";\nimport Axios from \"axios\";\nimport { setJWT } from \"../../util/jwt\";\nimport { useHistory } from \"react-router-dom\";\nimport { UserContext } from \"../../context/UserContext\";\nimport { Button } from \"../Button/Button\";\n\nimport \"./UserForm.scss\";\n\ninterface Props {\n  type: string;\n}\n\nexport const UserForm: React.FC<Props> = ({ type }) => {\n  const [userName, setUserName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const history = useHistory();\n  const { setCurrentUser, setLoggedIn } = useContext(UserContext);\n\n  let formText;\n  let buttonText;\n  let submitUrl;\n\n  switch (type) {\n    case \"login\":\n      formText = \"Log In\";\n      buttonText = \"Log In\";\n      submitUrl = `${process.env.REACT_APP_API_URL}/users/login`;\n      break;\n    case \"signup\":\n      formText = \"Create Account\";\n      buttonText = \"Submit\";\n      submitUrl = `${process.env.REACT_APP_API_URL}/users`;\n      break;\n  }\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const user = await Axios.post(submitUrl, { userName, password });\n      console.log({ user });\n      if (user.data) {\n        setLoggedIn(true);\n        setCurrentUser(user.data.currentUser);\n        setJWT(user.data.accessToken);\n        history.push(\"/posts\");\n      }\n    } catch (e) {\n      return e.message;\n    }\n  };\n\n  return (\n    <div className=\"user-form\">\n      <form onSubmit={(e) => onSubmit(e)}>\n        <div>{formText}</div>\n        <label htmlFor=\"username\">\n          Username\n          <input\n            type=\"text\"\n            onChange={(e) => setUserName(e.target.value)}\n            value={userName}\n          />\n        </label>\n        <label htmlFor=\"password\">\n          Password\n          <input\n            type=\"password\"\n            onChange={(e) => setPassword(e.target.value)}\n            value={password}\n          />\n        </label>\n        <Button buttonType=\"user\" type=\"submit\">\n          {buttonText}\n        </Button>\n      </form>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Button } from \"../Button/Button\";\nimport { getJWT } from \"../../util/jwt\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState } from \"draft-js\";\nimport { convertToRaw } from \"draft-js\";\nimport { useHistory } from \"react-router-dom\";\nimport Axios from \"axios\";\nimport draftToHtml from \"draftjs-to-html\";\nimport htmlWordCount from \"html-word-count\";\nimport \"../../../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport \"./CreatePostForm.scss\";\n\ninterface Props {}\n\nconst createKebabId = (title) => {\n  const arr = [];\n  const words = title.split(\" \");\n  words.forEach((word, i) => {\n    arr.push(word.toLowerCase());\n    if (i !== words.length - 1) arr.push(\"-\");\n  });\n  return arr.join(\"\");\n};\n\nexport const CreatePostForm: React.FC<Props> = (props) => {\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n  const [title, setTitle] = useState(\"\");\n  const [subtitle, setSubtitle] = useState(\"\");\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const history = useHistory();\n\n  const convertRawToHTML = (editorState) => {\n    const raw = convertToRaw(editorState.getCurrentContent());\n    const html = draftToHtml(raw);\n    return html;\n  };\n\n  const submit = async (e, editorState) => {\n    e.preventDefault();\n    const body = convertRawToHTML(editorState);\n    const wordCount = htmlWordCount(body);\n    const id = createKebabId(title);\n    const post = {\n      id,\n      body,\n      author: \"Ian Del Duca\",\n      title,\n      subtitle,\n      imageUrl,\n      wordCount,\n    };\n\n    await Axios.post(`${process.env.REACT_APP_API_URL}/posts`, post, {\n      headers: { Authorization: `bearer ${getJWT()}` },\n    });\n\n    history.push(\"/posts\");\n  };\n\n  return (\n    <form onSubmit={(e) => submit(e, editorState)} className=\"create-post-form\">\n      <div className=\"title\">Create a Blog Post</div>\n      <div className=\"create-post-form__inputs\">\n        <label>\n          Title:\n          <input\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n          ></input>\n        </label>\n        <label>\n          Subtitle:\n          <input\n            value={subtitle}\n            onChange={(e) => setSubtitle(e.target.value)}\n          ></input>\n        </label>\n        <label>\n          Image URL:\n          <input\n            value={imageUrl}\n            onChange={(e) => setImageUrl(e.target.value)}\n          ></input>\n        </label>\n      </div>\n      <label>\n        Body:\n        <div className=\"create-post-form__border\">\n          <Editor\n            editorState={editorState}\n            onEditorStateChange={(editorState) => setEditorState(editorState)}\n          />\n        </div>\n      </label>\n      <Button type=\"submit\" buttonType=\"user\">\n        Submit\n      </Button>\n    </form>\n  );\n};\n","import React from \"react\";\nimport { CreatePostForm } from \"../../components/CreatePostForm/CreatePostForm\";\nimport \"./CreatePostPage.scss\";\n\ninterface Props {}\n\nexport const CreatePostPage: React.FC<Props> = () => {\n  return (\n    <div>\n      <CreatePostForm />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\ninterface Props {\n  accessible: boolean;\n  path: string;\n  redirect: string;\n}\n\nexport const ProtectedRoute: React.FC<Props> = ({\n  accessible,\n  path,\n  redirect,\n  children,\n}) => {\n  return accessible ? (\n    <Route path={path}>{children}</Route>\n  ) : (\n    <Redirect to={redirect}></Redirect>\n  );\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Axios from \"axios\";\nimport { getJWT } from \"./util/jwt\";\nimport { Masthead } from \"components/Masthead/Masthead\";\nimport { LandingPage } from \"pages/LandingPage/LandingPage\";\nimport { PostIndexPage } from \"pages/PostIndexPage/PostIndexPage\";\nimport { Post } from \"./components/Post/Post\";\nimport { UserForm } from \"./components/UserForm/UserForm\";\nimport { CreatePostPage } from \"./pages/CreatePostPage/CreatePostPage\";\nimport { PostsContext } from \"./context/PostsContext\";\nimport { UserContext } from \"./context/UserContext\";\nimport \"./App.css\";\nimport { ProtectedRoute } from \"components/ProtectedRoute/ProtectedRoute\";\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n  const [currentUser, setCurrentUser] = useState(undefined);\n  const [loggedIn, setLoggedIn] = useState(false);\n  const jwt = getJWT();\n\n  const getPosts = useCallback(async () => {\n    const allposts = await Axios.get(`${process.env.REACT_APP_API_URL}/posts`);\n    setPosts(allposts.data);\n  }, [setPosts]);\n\n  const validateUser = useCallback(async (jwt) => {\n    return await Axios.post(`${process.env.REACT_APP_API_URL}/users/validate`, {\n      accessToken: jwt,\n    });\n  }, []);\n\n  useEffect(() => {\n    const userValidation = async () => {\n      const { data: validUser } = await validateUser(jwt);\n\n      if (jwt && validUser) {\n        setLoggedIn(true);\n        setCurrentUser(validUser);\n      } else {\n        setLoggedIn(false);\n      }\n    };\n    userValidation();\n  }, [setLoggedIn, setCurrentUser, validateUser, jwt]);\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <UserContext.Provider\n          value={{ currentUser, setCurrentUser, setLoggedIn, loggedIn }}\n        >\n          <Masthead />\n          <PostsContext.Provider value={{ posts, getPosts }}>\n            <Switch>\n              <Route exact path=\"/\">\n                <LandingPage></LandingPage>\n              </Route>\n              <Route exact path=\"/posts\">\n                <PostIndexPage></PostIndexPage>\n              </Route>\n              <ProtectedRoute\n                path=\"/posts/create\"\n                redirect=\"/posts\"\n                accessible={loggedIn && currentUser?.permissions === \"admin\"}\n              >\n                <CreatePostPage />\n              </ProtectedRoute>\n              <Route path=\"/posts/:id\">\n                <Post />\n              </Route>\n              <ProtectedRoute\n                path=\"/developement\"\n                redirect=\"/posts\"\n                accessible={loggedIn && currentUser?.permissions === \"admin\"}\n              >\n                <UserForm type=\"signup\"></UserForm>\n              </ProtectedRoute>\n              {/* <Route path=\"/development\">\n              </Route> */}\n              <Route path=\"/signup\">\n                <UserForm type=\"signup\"></UserForm>\n              </Route>\n              <Route path=\"/login\">\n                <UserForm type=\"login\"></UserForm>\n              </Route>\n            </Switch>\n          </PostsContext.Provider>\n        </UserContext.Provider>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
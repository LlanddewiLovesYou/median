{"version":3,"sources":["util/jwt.tsx","util/permissions.tsx","context/UserContext.tsx","components/Masthead/Masthead.tsx","components/Button/Button.tsx","pages/LandingPage/LandingPage.tsx","context/PostsContext.tsx","components/PostPreview/PostPreview.tsx","pages/PostIndexPage/PostIndexPage.tsx","components/UserForm/UserForm.tsx","hooks/useUserSubmit.tsx","context/PostPreviewContext.tsx","components/CreatePostForm/CreatePostForm.tsx","components/ByLine/ByLine.tsx","components/Post/Post.tsx","pages/CreatePostPage/CreatePostPage.tsx","components/ProtectedRoute/ProtectedRoute.tsx","pages/PostPage/PostPage.tsx","util/params.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getJWT","window","localStorage","getItem","isUserAdmin","user","undefined","permissions","UserContext","React","createContext","currentUser","loggedIn","setCurrentUser","setLoggedIn","Masthead","useContext","isAdmin","className","to","userName","Button","children","buttonType","type","onClick","LandingPage","props","PostsContext","posts","getPosts","PostPreview","post","id","author","title","subtitle","updatedAt","Date","toDateString","readTime","src","imageUrl","alt","PostIndexPage","useEffect","map","UserForm","formText","buttonText","submitUrl","process","useState","setUserName","password","setPassword","error","setError","history","useHistory","onSubmit","useCallback","e","a","preventDefault","Axios","data","token","accessToken","setItem","push","response","status","useMemo","useUserSubmit","htmlFor","onChange","target","value","PostPreviewContext","setPostPreview","createKebabId","arr","words","split","forEach","word","i","toLowerCase","length","join","CreatePostForm","EditorState","createEmpty","editorState","setEditorState","setTitle","setSubtitle","setImageUrl","convertRawToHTML","raw","convertToRaw","getCurrentContent","draftToHtml","submit","body","wordCount","htmlWordCount","claps","headers","Authorization","onEditorStateChange","now","preview","ByLine","Post","setClaps","jwt","deletePost","delete","authorization","clap","ReactHtmlParser","CreatePostPage","postPreview","Provider","ProtectedRoute","accessible","path","redirect","PostPage","setPost","postId","getPostIdFromPath","useLocation","pathname","get","requestedPost","getPost","App","setPosts","allposts","validateUser","validUser","userValidation","basename","exact","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1a471412.chunk.js","sourcesContent":["export const setJWT = (token) => {\n  window.localStorage.setItem(\"MEDIAN_JWT\", token);\n};\n\nexport const getJWT = () => {\n  return window.localStorage.getItem(\"MEDIAN_JWT\");\n};\n","export const isUserAdmin = (user) => {\n  if (user === undefined) {\n    return false;\n  }\n  return user.permissions === \"admin\";\n};\n","import React from \"react\";\n\ninterface UserContext {\n  currentUser?: any;\n  setCurrentUser?: any;\n  setLoggedIn?: any;\n  loggedIn?: any;\n}\n\nexport const UserContext = React.createContext<UserContext>({\n  currentUser: undefined,\n  loggedIn: undefined,\n  setCurrentUser: () => {},\n  setLoggedIn: () => {},\n});\n","import { ByLine } from \"components/ByLine/ByLine\";\nimport React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { isUserAdmin } from \"util/permissions\";\nimport { UserContext } from \"../../context/UserContext\";\nimport \"./Masthead.scss\";\n\ninterface Props {}\n\nexport const Masthead: React.FC<Props> = () => {\n  const { currentUser } = useContext(UserContext);\n  const isAdmin = isUserAdmin(currentUser);\n\n  return (\n    <div className=\"masthead\">\n      <Link to=\"/posts\" className=\"masthead__title\">\n        Median\n      </Link>\n      <div className=\"masthead__login\">\n        {!currentUser && (\n          <Link to=\"/signup\" className=\"button\">\n            Sign Up\n          </Link>\n        )}\n        {!currentUser && (\n          <Link to=\"/login\" className=\"button\">\n            Log In\n          </Link>\n        )}\n        {currentUser && `Welcome, ${currentUser.userName}`}\n        {currentUser && isAdmin && (\n          <Link to=\"/posts/create\" className=\"masthead__link\">\n            Create Post\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./Button.scss\";\n\ninterface Props {\n  buttonType: string;\n  type?: any;\n  onClick?: () => {};\n}\n\nexport const Button: React.FC<Props> = ({\n  children,\n  buttonType,\n  type,\n  onClick,\n}) => {\n  return (\n    <button\n      type={type}\n      className={\"button button__\" + buttonType}\n      onClick={onClick || (() => {})}\n    >\n      {children}\n    </button>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"../../components/Button/Button\";\nimport \"./LandingPage.scss\";\n\ninterface Props {}\n\nexport const LandingPage: React.FC<Props> = (props) => {\n  return (\n    <div className=\"landing-page\">\n      <div className=\"landing-page__content\">\n        <div className=\"header\">Dive deeper on topics that matter to Ian.</div>\n        <div className=\"sub-header\">\n          <u>Med</u>ia related to <u>Ian</u>... <u>Median</u>.\n        </div>\n        <Link to=\"/posts\">\n          <Button buttonType=\"transparent\">Get Started</Button>\n        </Link>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const PostsContext = React.createContext({\n  posts: [],\n  getPosts: () => {},\n});\n","import React from \"react\";\nimport { Post } from \"../../types/Post\";\nimport { Link } from \"react-router-dom\";\nimport \"./PostPreview.scss\";\n\ninterface Props {\n  post: Post;\n}\n\nexport const PostPreview: React.FC<Props> = ({ post }) => {\n  return (\n    <Link to={`/posts/${post.id}`} className=\"post-preview\">\n      <div>\n        <div className=\"post-preview__author\">\n          <span className=\"placeholder post-preview__placeholder\">ID</span>\n          {post.author}\n        </div>\n        <h1>{post.title}</h1>\n        <h3>{post.subtitle}</h3>\n        <div className=\"post-preview__meta-data\">\n          {post.updatedAt ? (\n            <span>{new Date(post.updatedAt).toDateString()}</span>\n          ) : null}\n          <span className=\"post-preview__separator\">•</span>\n          {post.readTime ? <span>{post.readTime}m</span> : null}\n        </div>\n      </div>\n      <img src={post.imageUrl} alt=\"\" />\n    </Link>\n  );\n};\n","import React, { useContext, useEffect } from \"react\";\nimport { PostsContext } from \"../../context/PostsContext\";\nimport { PostPreview } from \"../../components/PostPreview/PostPreview\";\nimport \"./PostIndexPage.scss\";\n\nexport const PostIndexPage = () => {\n  const { posts, getPosts } = useContext(PostsContext);\n\n  useEffect(() => {\n    getPosts();\n  }, [getPosts]);\n\n  return (\n    <div className=\"post-index-page\">\n      {posts.map((post) => {\n        return <PostPreview post={post} />;\n      })}\n    </div>\n  );\n};\n","import React, { useState, useContext } from \"react\";\nimport { useUserSubmit } from \"../../hooks/useUserSubmit\";\nimport { Button } from \"../Button/Button\";\n\nimport \"./UserForm.scss\";\n\ninterface Props {\n  type: string;\n}\n\nexport const UserForm: React.FC<Props> = ({ type }) => {\n  let formText;\n  let buttonText;\n  let submitUrl;\n\n  switch (type) {\n    case \"login\":\n      formText = \"Log In\";\n      buttonText = \"Log In\";\n      submitUrl = `${process.env.REACT_APP_API_URL}/users/login`;\n      break;\n    case \"signup\":\n      formText = \"Create Account\";\n      buttonText = \"Submit\";\n      submitUrl = `${process.env.REACT_APP_API_URL}/users`;\n      break;\n  }\n\n  const {\n    onSubmit,\n    error,\n    setUserName,\n    userName,\n    setPassword,\n    password,\n  } = useUserSubmit(submitUrl);\n\n  return (\n    <div className=\"user-form\">\n      <form onSubmit={(e) => onSubmit(e)}>\n        <div>{formText}</div>\n        <div className={`error ${error ? \"visible\" : null}`}>{error}</div>\n        <label htmlFor=\"username\">\n          Username\n          <input\n            type=\"text\"\n            onChange={(e) => setUserName(e.target.value)}\n            value={userName}\n          />\n        </label>\n        <label htmlFor=\"password\">\n          Password\n          <input\n            type=\"password\"\n            onChange={(e) => setPassword(e.target.value)}\n            value={password}\n          />\n        </label>\n        <Button buttonType=\"user\" type=\"submit\">\n          {buttonText}\n        </Button>\n      </form>\n    </div>\n  );\n};\n","import { useState, useContext, useCallback, useMemo } from \"react\";\nimport { UserContext } from \"../context/UserContext\";\nimport { useHistory } from \"react-router-dom\";\nimport { setJWT } from \"../util/jwt\";\nimport Axios from \"axios\";\n\nexport const useUserSubmit = (submitUrl) => {\n  const [userName, setUserName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(undefined);\n  const history = useHistory();\n  const { setCurrentUser, setLoggedIn } = useContext(UserContext);\n\n  const onSubmit = useCallback(\n    async (e) => {\n      e.preventDefault();\n      setError(undefined);\n      try {\n        const user = await Axios.post(submitUrl, { userName, password });\n\n        if (user.data) {\n          setLoggedIn(true);\n          setCurrentUser(user.data.currentUser);\n          setJWT(user.data.accessToken);\n          history.push(\"/posts\");\n        }\n      } catch (e) {\n        if (e.response.status === 401) {\n          setError(\"Invalid Username or Password\");\n        } else {\n          setError(\"Something went wrong...\");\n        }\n      }\n    },\n    [\n      setError,\n      setLoggedIn,\n      setCurrentUser,\n      history,\n      password,\n      submitUrl,\n      userName,\n    ]\n  );\n  return useMemo(() => {\n    return {\n      onSubmit,\n      error,\n      setUserName,\n      userName,\n      setPassword,\n      password,\n    };\n  }, [onSubmit, error, setUserName, userName, setPassword, password]);\n};\n","import React from \"react\";\n\ninterface PostPreviewContext {\n  setPostPreview?: any;\n}\n\nexport const PostPreviewContext = React.createContext<PostPreviewContext>({\n  setPostPreview: () => {},\n});\n","import React, { useState, useContext } from \"react\";\nimport { Button } from \"../Button/Button\";\nimport { PostPreviewContext } from \"context/PostPreviewContext\";\nimport { getJWT } from \"../../util/jwt\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState } from \"draft-js\";\nimport { convertToRaw } from \"draft-js\";\nimport { useHistory } from \"react-router-dom\";\nimport Axios from \"axios\";\nimport draftToHtml from \"draftjs-to-html\";\nimport htmlWordCount from \"html-word-count\";\nimport \"../../../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport \"./CreatePostForm.scss\";\n\ninterface Props {}\n\nconst createKebabId = (title) => {\n  const arr = [];\n  const words = title.split(\" \");\n  words.forEach((word, i) => {\n    arr.push(word.toLowerCase());\n    if (i !== words.length - 1) arr.push(\"-\");\n  });\n  return arr.join(\"\");\n};\n\nexport const CreatePostForm: React.FC<Props> = (props) => {\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n  const [title, setTitle] = useState(\"\");\n  const [subtitle, setSubtitle] = useState(\"\");\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const history = useHistory();\n  const { setPostPreview } = useContext(PostPreviewContext);\n\n  const convertRawToHTML = (editorState) => {\n    const raw = convertToRaw(editorState.getCurrentContent());\n    const html = draftToHtml(raw);\n    return html;\n  };\n\n  const submit = async (e, editorState) => {\n    e.preventDefault();\n    const body = convertRawToHTML(editorState);\n    const wordCount = htmlWordCount(body);\n    const id = createKebabId(title);\n    const post = {\n      id,\n      body,\n      author: \"Ian Del Duca\",\n      claps: 0,\n      title,\n      subtitle,\n      imageUrl,\n      wordCount,\n    };\n\n    await Axios.post(`${process.env.REACT_APP_API_URL}/posts`, post, {\n      headers: { Authorization: `bearer ${getJWT()}` },\n    });\n\n    history.push(\"/posts\");\n  };\n\n  const preview = (e) => {\n    e.preventDefault();\n    const body = convertRawToHTML(editorState);\n    const post = {\n      id: createKebabId(title),\n      body,\n      author: \"Ian Del Duca\",\n      title,\n      subtitle,\n      imageUrl,\n      readTime: \"XXm\",\n      updatedAt: new Date(Date.now()),\n    };\n    setPostPreview(post);\n  };\n\n  return (\n    <div>\n      <form\n        onSubmit={(e) => submit(e, editorState)}\n        className=\"create-post-form\"\n      >\n        <div className=\"title\">Create a Blog Post</div>\n        <div className=\"create-post-form__inputs\">\n          <label>\n            Title:\n            <input\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            ></input>\n          </label>\n          <label>\n            Subtitle:\n            <input\n              value={subtitle}\n              onChange={(e) => setSubtitle(e.target.value)}\n            ></input>\n          </label>\n          <label>\n            Image URL:\n            <input\n              value={imageUrl}\n              onChange={(e) => setImageUrl(e.target.value)}\n            ></input>\n          </label>\n        </div>\n        <label>\n          Body:\n          <div className=\"create-post-form__border\">\n            <Editor\n              editorState={editorState}\n              onEditorStateChange={(editorState) => setEditorState(editorState)}\n            />\n          </div>\n        </label>\n        <div className=\"buttons\">\n          <Button buttonType=\"transparent\" onClick={(e) => preview(e)}>\n            Preview\n          </Button>\n          <Button type=\"submit\" buttonType=\"user\">\n            Submit\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Post } from \"types/Post\";\nimport \"./ByLine.scss\";\n\ninterface Props {\n  post: Post;\n}\n\nexport const ByLine: React.FC<Props> = ({ post }) => {\n  const { updatedAt, readTime, author } = post;\n  return (\n    <div className=\"by-line\">\n      <span className=\"by-line__placeholder\">ID</span>\n      <div className=\"by-line__data\">\n        <div>{author}</div>\n        <div className=\"by-line__data-secondline\">\n          <div>{new Date(updatedAt).toDateString()}</div>\n          <span className=\"by-line__separator\">•</span>\n          <div>{readTime} min</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Post as PostType } from \"../../types/Post\";\nimport { ByLine } from \"../ByLine/ByLine\";\nimport { Button } from \"../Button/Button\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport \"./Post.scss\";\nimport { UserContext } from \"context/UserContext\";\nimport { isUserAdmin } from \"util/permissions\";\nimport { getJWT } from \"../../util/jwt\";\nimport Axios from \"axios\";\n\ninterface Props {\n  post: any;\n}\n\nexport const Post: React.FC<Props> = ({ post }) => {\n  const { currentUser } = useContext(UserContext);\n  const [claps, setClaps] = useState(0);\n  const isAdmin = isUserAdmin(currentUser);\n  const jwt = getJWT();\n\n  useEffect(() => {\n    setClaps(post.claps);\n  }, [post]);\n\n  const deletePost = async (e) => {\n    e.preventDefault();\n    await Axios.delete(`${process.env.REACT_APP_API_URL}/posts/${post.id}`, {\n      headers: { authorization: `bearer ${jwt}` },\n    });\n  };\n\n  const clap = async (e) => {\n    e.preventDefault();\n    setClaps(claps + 1);\n    await Axios.post(`${process.env.REACT_APP_API_URL}/claps/${post.id}`);\n  };\n\n  return (\n    <div className=\"post\">\n      <h1>{post.title}</h1>\n      <h3 className=\"\">{post.subtitle}</h3>\n      {post.author && <ByLine post={post as PostType} />}\n      <img src={post.imageUrl} alt=\"\" />\n      <div>{ReactHtmlParser(post.body)}</div>\n      <div className=\"claps\" onClick={(e) => clap(e)}>\n        <img src=\"https://topmediumstories.com/clap.png\" alt=\"\" />\n        <span>{claps}</span>\n      </div>\n      {isAdmin && (\n        <Button buttonType=\"delete\" onClick={(e) => deletePost(e)}>\n          Delete Post\n        </Button>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { CreatePostForm } from \"../../components/CreatePostForm/CreatePostForm\";\nimport { Post } from \"../../components/Post/Post\";\nimport { PostPreviewContext } from \"../../context/PostPreviewContext\";\nimport \"./CreatePostPage.scss\";\n\ninterface Props {}\n\nexport const CreatePostPage: React.FC<Props> = () => {\n  const [postPreview, setPostPreview] = useState(undefined);\n  return (\n    <div className=\"create-post-page\">\n      <PostPreviewContext.Provider value={{ setPostPreview }}>\n        {postPreview && (\n          <div className=\"preview\">\n            <span className=\"prev-text\">PREVIEW</span>\n            <Post post={postPreview} />\n          </div>\n        )}\n        <CreatePostForm />\n      </PostPreviewContext.Provider>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\ninterface Props {\n  accessible: boolean;\n  path: string;\n  redirect: string;\n}\n\nexport const ProtectedRoute: React.FC<Props> = ({\n  accessible,\n  path,\n  redirect,\n  children,\n}) => {\n  return accessible ? (\n    <Route path={path}>{children}</Route>\n  ) : (\n    <Redirect to={redirect}></Redirect>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Post } from \"../../components/Post/Post\";\nimport { getPostIdFromPath } from \"../../util/params\";\nimport Axios from \"axios\";\nimport { useLocation } from \"react-router-dom\";\n\ninterface Props {}\n\nexport const PostPage: React.FC<Props> = () => {\n  const [post, setPost] = useState({\n    title: \"\",\n    subtitle: \"\",\n    author: \"\",\n    imageUrl: \"\",\n    body: \"\",\n  });\n  const path = useLocation().pathname;\n  const postId = getPostIdFromPath(path);\n\n  useEffect(() => {\n    const getPost = async () => {\n      const requestedPost = await Axios.get(\n        `${process.env.REACT_APP_API_URL}/posts/${postId}`\n      );\n      setPost(requestedPost.data[0]);\n    };\n    getPost();\n  }, [postId, setPost]);\n\n  return (\n    <div>\n      {post ? (\n        <Post post={post} />\n      ) : (\n        <img src=\"https://media0.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif\" />\n      )}\n    </div>\n  );\n};\n","export const getPostIdFromPath = (path: string): string => {\n  const pathArray = path.split(\"/\");\n  return pathArray[2];\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Axios from \"axios\";\nimport { getJWT } from \"./util/jwt\";\nimport { Masthead } from \"components/Masthead/Masthead\";\nimport { LandingPage } from \"pages/LandingPage/LandingPage\";\nimport { PostIndexPage } from \"pages/PostIndexPage/PostIndexPage\";\nimport { Post } from \"./components/Post/Post\";\nimport { UserForm } from \"./components/UserForm/UserForm\";\nimport { CreatePostPage } from \"./pages/CreatePostPage/CreatePostPage\";\nimport { PostsContext } from \"./context/PostsContext\";\nimport { UserContext } from \"./context/UserContext\";\nimport \"./App.css\";\nimport { ProtectedRoute } from \"components/ProtectedRoute/ProtectedRoute\";\nimport { PostPage } from \"pages/PostPage/PostPage\";\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n  const [currentUser, setCurrentUser] = useState(undefined);\n  const [loggedIn, setLoggedIn] = useState(false);\n  const jwt = getJWT();\n\n  const getPosts = useCallback(async () => {\n    const allposts = await Axios.get(`${process.env.REACT_APP_API_URL}/posts`);\n    setPosts(allposts.data);\n  }, [setPosts]);\n\n  const validateUser = useCallback(async (jwt) => {\n    return await Axios.post(`${process.env.REACT_APP_API_URL}/users/validate`, {\n      accessToken: jwt,\n    });\n  }, []);\n\n  useEffect(() => {\n    const userValidation = async () => {\n      const { data: validUser } = await validateUser(jwt);\n\n      if (jwt && validUser) {\n        setLoggedIn(true);\n        setCurrentUser(validUser);\n      } else {\n        setLoggedIn(false);\n      }\n    };\n    userValidation();\n  }, [setLoggedIn, setCurrentUser, validateUser, jwt]);\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <UserContext.Provider\n          value={{ currentUser, setCurrentUser, setLoggedIn, loggedIn }}\n        >\n          <Masthead />\n          <PostsContext.Provider value={{ posts, getPosts }}>\n            <Switch>\n              <Route exact path=\"/\">\n                <LandingPage></LandingPage>\n              </Route>\n              <Route exact path=\"/posts\">\n                <PostIndexPage></PostIndexPage>\n              </Route>\n              <ProtectedRoute\n                path=\"/posts/create\"\n                redirect=\"/posts\"\n                accessible={loggedIn && currentUser?.permissions === \"admin\"}\n              >\n                <CreatePostPage />\n              </ProtectedRoute>\n              <Route path=\"/posts/:id\">\n                <PostPage />\n              </Route>\n              <ProtectedRoute\n                path=\"/developement\"\n                redirect=\"/posts\"\n                accessible={loggedIn && currentUser?.permissions === \"admin\"}\n              >\n                <UserForm type=\"signup\"></UserForm>\n              </ProtectedRoute>\n              {/* <Route path=\"/development\">\n              </Route> */}\n              <Route path=\"/signup\">\n                <UserForm type=\"signup\"></UserForm>\n              </Route>\n              <Route path=\"/login\">\n                <UserForm type=\"login\"></UserForm>\n              </Route>\n            </Switch>\n          </PostsContext.Provider>\n        </UserContext.Provider>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}